(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{387:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("之前的开发工作主要建立在独立用户体系下的 SPA 开发，或者是微信小程序的用户体系下，这次有个项目是在微信体系里的移动端网页的开发，虽然这个开发体系已经足够成熟，但是因为自己是首次接触并且承担了这个项目的搭建，一路过来还是踩了很多坑。")]),t._v(" "),a("h3",{attrs:{id:"vue-router-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-模式"}},[t._v("#")]),t._v(" vue-router 模式")]),t._v(" "),a("p",[t._v("因为 vue-router 的默认 mode 是 hash 模式，所以一开始开发时我使用的就是模式 hash 模式。hash 模式有个问题，微信网页获取授权时，大部分都是使用跳转达到目的的，比如网页授权登录时，是跳转到一个新的页面去换取 code，然后再跳转回来，新的 URL 中带了 code 参数，而且该 code 拼接的位置有点尴尬，并非 abc.com/#/home?code=123，而是 abc.com?code=123/#/home。加上跳转去授权页的网址可能本身就带了十分复杂的参数，这给后期从 URL 中读取 code 造成了很大的麻烦，如果再加上后期的分享操作时，微信自动给 URL 拼接上的一些 scene，整个 URL 就变得非常恶心。所以即使在项目即将提测之时，我还是选择了将 router 的模式换成 history，没有了#，所有的参数都可以通过 query 对象轻易获得。history 模式下，看起来一切都很完美安好，但是，出现了一个问题，不能刷新，一刷新，如果不是首页地址，便会出现 404。因为服务器端是无法识别到这个 URL 的。此时需要后端同学的配合，因为部署时使用了 nginx，所以只需要在 nginx 的配置加上")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  try_files $uri $uri"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("php"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\\$query_string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("至于这段配置的作用，在网上看到一个挺好的解释：")]),t._v(" "),a("blockquote",[a("p",[t._v("当用户访问 abc.com/home 时，此时对应的 URI 就是 home。try_files 会尝试在硬盘里寻找这个文件，如果存在名为/$root/home的文件，（$root 为项目根目录），就直接将此文件的内容返回给用户，如果不存在，就看 url/，意为寻找/$root/home/的目录，如果还找不到，就会 fall back 到/index.php，发起一个内部子请求，也就是相当于 nginx 发起一个 HTTP 请求到 localhost/index.php")])]),t._v(" "),a("p",[t._v("在使用 hash 模式时，使用了大量的时间去兼容微信拼接的各种格式下的 url，最后还是采取了 history 模式。建议是，如果涉及到微信体系的 SPA 的开发，路由模式建议使用 history。")]),t._v(" "),a("p",[t._v("hash 模式和 history 模式的区别在于：\n• 很明显的在 url 上，hash 模式带了很难看的#，而 history 模式没有\n• hash 模式时，hash 的改变不会对服务器端发起请求。hash 发生变化的 url 都会被浏览器记录下来，所以浏览器可以后退前进，且因为 hash 的改变会触发 hashChange，因此 hash 的值可以将页面状态和 URL 绑定起来\n• 对于 history 模式，虽然 URL 中没有了难看的#，但是该模式下的网页惧怕刷新。如果刷新时没有找到对应的资源，分分钟 404。该模式借助了 HTML5 中的几个新的 API：history.pushState，history.replaceState，以及 history.state。\n• hash 模式的优点在于，无需后端配合，且兼容性好。但是缺点在于丑，会使得锚点功能失效，且相同的 hash 值不会触发动作将记录记入历史栈")]),t._v(" "),a("h3",{attrs:{id:"js-skd-的签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-skd-的签名"}},[t._v("#")]),t._v(" JS-SKD 的签名")]),t._v(" "),a("p",[t._v("使用微信提供的 SDK，需要先请求签名后才能注入。在签名时，只需要使用 location.href 充当签名的 url 即可。此时如果前端有编码的话（官方建议），需要后端也进行解码。因为官方文档说每次 url 发生变化时都需要签名一次，所以一般在页面的 created 或者 mounted 周期进行签名。在 router 模式改为 history 模式后，iOS 上出现了签名无效 "),a("code",[t._v("invalid signature")]),t._v(" 的报错，如果刷新后则可以签名成功，经过查阅资料发现，是因为 vue-router 切换的时候都是操作浏览器的历史记录，真实 URL 为第一次刚进入时的 URL。微信要求签名时的 URL 必须是当前页面的 URL，而在 iOS 系统对 HTML5 的 history 相关 API 的兼容性不是很好，所以出现了在 iOS 下 SPA 的 URL 不会发生变化的情况。而在安卓下，SPA 的 URL 是会发生的变化的，")]),t._v(" "),a("p",[t._v("在网上搜索解决方案的时候，找到了一个这样的方案：在 router 的拦截器上加入以下代码。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" u "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" navigator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userAgent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" isiOS "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\(i[^;]+;( U;)? CPU.+Mac OS X")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ios终端")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isiOS "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pathname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处不可使用location.replace")]),t._v("\n    location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("实际上，这个方案是可行的，但是因为对于 iOS 设备，并非使用 router 的 next()方法，所以在使用后退键时会出现一些页面的生命周期不会触发。所以只能放弃这个方案。")]),t._v(" "),a("p",[t._v("最后我采用了一个比较“丑陋”的解决方法解决了这个问题。使用一个全局变量，在 router.afterEach 中，对 iOS 设备的当前路径做了一个记录。然后在微信 js-sdk 获取签名时，取相应的这个全局变量。")]),t._v(" "),a("p",[t._v("这次项目的搭建开发过程中，在这两个坑上花的时间很多，所以做了一点记录，比起小程序的开发，微信网页端的一些设计并不是很友好，比如网页登录授权的过程以及一次性订阅消息的订阅过程。同时，发现了 vue-router 没有相关的 API 可以发挥小程序中的"),a("code",[t._v("wx.repalce")]),t._v("的相同作用，有的页面并不想提供后退功能，但是暂时找不到可行的方案。")])])}),[],!1,null,null,null);s.default=e.exports}}]);